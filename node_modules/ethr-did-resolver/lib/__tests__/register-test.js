'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _didResolver = require('did-resolver');

var _didResolver2 = _interopRequireDefault(_didResolver);

var _register = require('../register');

var _register2 = _interopRequireDefault(_register);

var _truffleContract = require('truffle-contract');

var _truffleContract2 = _interopRequireDefault(_truffleContract);

var _ethrDidRegistry = require('ethr-did-registry');

var _ethrDidRegistry2 = _interopRequireDefault(_ethrDidRegistry);

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _ganacheCli = require('ganache-cli');

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sleep(seconds) {
  return new _promise2.default(function (resolve, reject) {
    return setTimeout(resolve, seconds * 1000);
  });
}
describe('ethrResolver', function () {
  var provider = _ganacheCli2.default.provider();
  // const provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545')
  var DidReg = (0, _truffleContract2.default)(_ethrDidRegistry2.default);
  var web3 = new _web2.default();
  web3.setProvider(provider);
  var getAccounts = function getAccounts() {
    return new _promise2.default(function (resolve, reject) {
      return web3.eth.getAccounts(function (error, accounts) {
        return error ? reject(error) : resolve(accounts);
      });
    });
  };
  DidReg.setProvider(provider);

  var registry = void 0,
      accounts = void 0,
      did = void 0,
      identity = void 0,
      owner = void 0,
      delegate1 = void 0,
      delegate2 = void 0;

  beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getAccounts();

          case 2:
            accounts = _context.sent;

            identity = accounts[1];
            owner = accounts[2];
            delegate1 = accounts[3];
            delegate2 = accounts[4];
            did = 'did:ethr:' + identity;

            _context.next = 10;
            return DidReg.new({
              from: accounts[0],
              gasPrice: 100000000000,
              gas: 4712388 //1779962
            });

          case 10:
            registry = _context.sent;

            (0, _register2.default)({ provider: provider, registry: registry.address });

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  describe('unregistered', function () {
    it('resolves document', function () {
      return expect((0, _didResolver2.default)(did)).resolves.toEqual({
        '@context': 'https://w3id.org/did/v1',
        id: did,
        publicKey: [{
          id: did + '#owner',
          type: 'Secp256k1VerificationKey2018',
          owner: did,
          ethereumAddress: identity
        }],
        authentication: [{
          type: 'Secp256k1SignatureAuthentication2018',
          publicKey: did + '#owner'
        }]
      });
    });
  });

  describe('owner changed', function () {
    beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return registry.changeOwner(identity, owner, { from: identity });

            case 2:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));

    it('resolves document', function () {
      return expect((0, _didResolver2.default)(did)).resolves.toEqual({
        '@context': 'https://w3id.org/did/v1',
        id: did,
        publicKey: [{
          id: did + '#owner',
          type: 'Secp256k1VerificationKey2018',
          owner: did,
          ethereumAddress: owner
        }],
        authentication: [{
          type: 'Secp256k1SignatureAuthentication2018',
          publicKey: did + '#owner'
        }]
      });
    });
  });

  describe('delegates', function () {
    describe('add signing delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return registry.addDelegate(identity, 'Secp256k1VerificationKey2018', delegate1, 2, { from: owner });

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate1
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }]
        });
      });
    });

    describe('add auth delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return registry.addDelegate(identity, 'Secp256k1SignatureAuthentication2018', delegate2, 10, { from: owner });

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate1
          }, {
            id: did + '#delegate-2',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate2
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }, {
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#delegate-2'
          }]
        });
      });
    });

    describe('expire automatically', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return sleep(3);

              case 2:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate2
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }, {
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#delegate-1'
          }]
        });
      });
    });

    describe('revokes delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return registry.revokeDelegate(identity, 'Secp256k1SignatureAuthentication2018', delegate2, { from: owner });

              case 2:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }]
        });
      });
    });

    describe('re-add auth delegate', function () {
      beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return registry.addDelegate(identity, 'Secp256k1SignatureAuthentication2018', delegate2, 86400, { from: owner });

              case 2:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, undefined);
      })));

      it('resolves document', function () {
        return expect((0, _didResolver2.default)(did)).resolves.toEqual({
          '@context': 'https://w3id.org/did/v1',
          id: did,
          publicKey: [{
            id: did + '#owner',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: owner
          }, {
            id: did + '#delegate-1',
            type: 'Secp256k1VerificationKey2018',
            owner: did,
            ethereumAddress: delegate2
          }],
          authentication: [{
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#owner'
          }, {
            type: 'Secp256k1SignatureAuthentication2018',
            publicKey: did + '#delegate-1'
          }]
        });
      });
    });
  });

  describe('attributes', function () {
    describe('publicKey', function () {
      describe('Secp256k1VerificationKey2018', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
          return _regenerator2.default.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return registry.setAttribute(identity, 'did/publicKey/Secp256k1VerificationKey2018', '0x02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 10, { from: owner });

                case 2:
                case 'end':
                  return _context8.stop();
              }
            }
          }, _callee8, undefined);
        })));

        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }, {
              id: did + '#delegate-2',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              publicKeyHex: '02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71'
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }]
          });
        });
      });

      describe('Ed25519VerificationKey2018', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
          return _regenerator2.default.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return registry.setAttribute(identity, 'did/publicKey/Ed25519VerificationKey2018/publicKeyBase64', '0x02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 10, { from: owner });

                case 2:
                case 'end':
                  return _context9.stop();
              }
            }
          }, _callee9, undefined);
        })));

        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }, {
              id: did + '#delegate-2',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              publicKeyHex: '02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71'
            }, {
              id: did + '#delegate-3',
              type: 'Ed25519VerificationKey2018',
              owner: did,
              publicKeyBase64: Buffer.from('02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 'hex').toString('base64')
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }]
          });
        });
      });
    });

    describe('service endpoints', function () {
      describe('HubService', function () {
        beforeAll((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
          return _regenerator2.default.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return registry.setAttribute(identity, 'did/service/HubService', 'https://hubs.uport.me', 10, { from: owner });

                case 2:
                case 'end':
                  return _context10.stop();
              }
            }
          }, _callee10, undefined);
        })));
        it('resolves document', function () {
          return expect((0, _didResolver2.default)(did)).resolves.toEqual({
            '@context': 'https://w3id.org/did/v1',
            id: did,
            publicKey: [{
              id: did + '#owner',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: owner
            }, {
              id: did + '#delegate-1',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              ethereumAddress: delegate2
            }, {
              id: did + '#delegate-2',
              type: 'Secp256k1VerificationKey2018',
              owner: did,
              publicKeyHex: '02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71'
            }, {
              id: did + '#delegate-3',
              type: 'Ed25519VerificationKey2018',
              owner: did,
              publicKeyBase64: Buffer.from('02b97c30de767f084ce3080168ee293053ba33b235d7116a3263d29f1450936b71', 'hex').toString('base64')
            }],
            authentication: [{
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#owner'
            }, {
              type: 'Secp256k1SignatureAuthentication2018',
              publicKey: did + '#delegate-1'
            }],
            service: [{
              type: 'HubService',
              serviceEndpoint: 'https://hubs.uport.me'
            }]
          });
        });
      });
    });
  });

  describe('error handling', function () {
    it('rejects promise', function () {
      return expect((0, _didResolver2.default)('did:ethr:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX')).rejects.toEqual(new Error('Not a valid ethr DID: did:ethr:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX'));
    });
  });
});