'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isChasquiCallback = exports.genCallback = exports.clearResponse = exports.poll = exports.URIHandlerSend = undefined;

var _util = require('./../message/util.js');

var _index = require('./../crypto/index.js');

var _poll = require('./poll.js');

var _poll2 = _interopRequireDefault(_poll);

var _didJwt = require('did-jwt');

var _nets = require('nets');

var _nets2 = _interopRequireDefault(_nets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CHASQUI_URL = 'https://chasqui.uport.me/api/v1/topic/';
var POLLING_INTERVAL = 2000;

// TODO can the name of URIHandler be changed
// TODO should it just allow cancel func to be passed in??
// TODO Should it return uri append to promise? instead of a promise??
/**
  *  A general Chasqui Transport. Allows you to configure the transport with any uriHandler for the request,
  *  while the response will always be returned through Chasqui. Chasqui is a simple messaging server that
  *  allows responses to be relayed from a uport client to the original callee.
  *
  *  @param    {String}       uriHandler              a function called with the requestURI once it is formatted for this transport
  *  @param    {Object}       [config={}]             an optional config object
  *  @param    {String}       config.chasquiUrl       url of messaging server, defaults to Chasqui instance run by uPort
  *  @param    {String}       config.pollingInterval  milisecond interval at which the messaging server will be polled for a response
  *  @return   {Function}                             a configured QRTransport Function
  *  @param    {String}       uri                     a uport client request URI
  *  @return   {Promise<Object, Error>}               a function to close the QR modal
  */
var URIHandlerSend = function URIHandlerSend(uriHandler) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$chasquiUrl = _ref.chasquiUrl,
      chasquiUrl = _ref$chasquiUrl === undefined ? CHASQUI_URL : _ref$chasquiUrl,
      _ref$pollingInterval = _ref.pollingInterval,
      pollingInterval = _ref$pollingInterval === undefined ? POLLING_INTERVAL : _ref$pollingInterval;

  if (!uriHandler) throw new Error('uriHandler function required');
  return function (uri) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var callback = getCallback(uri);
    var isCancelled = false;
    var cancel = function cancel() {
      isCancelled = true;
    };
    uri = (0, _util.paramsToQueryString)(uri, { 'callback_type': 'post' });
    uriHandler(uri, Object.assign(params, { cancel: cancel }));
    var returnVal = poll(callback, pollingInterval, function () {
      return isCancelled;
    });
    returnVal.cancel = cancel;
    return returnVal;
  };
};

/**
  *  A polling function specifically for polling Chasqui.
  *
  *  @param    {String}                  url                a Chasqui url polled
  *  @param    {Integer}                 pollingInterval    ms interval at which the given url is polled
  *  @param    {Function}                cancelled          function which returns boolean, if returns true, polling stops
  *  @return   {Promise<Object, Error>}                     a promise which resolves with obj/message or rejects with an error
  */
var poll = function poll(url, pollingInterval, cancelled) {
  var messageParse = function messageParse(res) {
    if (res.message) return res.message['access_token'] || res.message['tx'];
  };
  var errorParse = function errorParse(res) {
    if (res.message) return res.message.error;
  };
  return (0, _poll2.default)(url, messageParse, errorParse, cancelled, pollingInterval).then(function (res) {
    clearResponse(url);
    return res;
  });
};

// TODO maybe remove and just have reasonable removal times
var clearResponse = function clearResponse(url) {
  (0, _nets2.default)({
    uri: url,
    method: 'DELETE',
    withCredentials: false,
    rejectUnauthorized: false
  }, function (err) {
    if (err) {
      throw err;
    } /* Errors without this cb */
  });
};

var genCallback = function genCallback() {
  return '' + CHASQUI_URL + (0, _index.randomString)(16);
};
var isChasquiCallback = function isChasquiCallback(uri) {
  return new RegExp(CHASQUI_URL).test(getCallback(uri));
};
var getCallback = function getCallback(uri) {
  return (0, _didJwt.decodeJWT)((0, _util.getURLJWT)(uri)).payload.callback;
};

exports.URIHandlerSend = URIHandlerSend;
exports.poll = poll;
exports.clearResponse = clearResponse;
exports.genCallback = genCallback;
exports.isChasquiCallback = isChasquiCallback;